myval = 10

[fortran]
INTEGER i, j, k

DO k=LBOUND(X, 3), UBOUND(X, 3)
    DO j=LBOUND(X, 2), UBOUND(X, 2)
        DO i=LBOUND(X, 1), UBOUND(X, 1)
            Z(i, j, k) = X(i, j, k) + Y(i, j, k)
        END DO
    END DO
END DO

[fortran_openacc]
INTEGER i, j, k

!$acc parallel loop collapse(3) present(X, Y, Z) async
DO k=LBOUND(X, 3), UBOUND(X, 3)
    DO j=LBOUND(X, 2), UBOUND(X, 2)
        DO i=LBOUND(X, 1), UBOUND(X, 1)
            Z(i, j, k) = X(i, j, k) + Y(i, j, k)
        END DO
    END DO
END DO
!$acc end parallel loop

[fortran_omptarget]
INTEGER i, j, k

!$omp target
!$omp teams distribute num_teams(UBOUND(X, 3)-LBOUND(X, 3)+1)
DO k=LBOUND(X, 3), UBOUND(X, 3)
    !$omp parallel do simd collapse(2) private(j, i)
    DO j=LBOUND(X, 2), UBOUND(X, 2)
        DO i=LBOUND(X, 1), UBOUND(X, 1)
            Z(i, j, k) = X(i, j, k) + Y(i, j, k)
        END DO
    END DO
    !$omp end parallel do simd
END DO
!$omp end teams distribute
!$omp end target


[cpp, cpp_openacc]

#pragma acc parallel loop
for (int i=0; i < JAI_LEN(x); i++) {
	z[i] = x[i] + j[i]
}

[cuda, hip]

int i = blockDim.x * blockIdx.x;
int j = blockDim.y * blockIdx.y;
int k = blockDim.z * blockIdx.z;

Z[k][j][i] = X[k][j][i] + Y[k][j][i];


